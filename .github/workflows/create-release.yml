name: Create Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  discussions: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [android, windows, linux]
        include:
          - platform: android
            export_preset: "Android"
            artifact_path: build/android/game.apk
            needs_zip: false
            extra_setup: true
          - platform: windows
            export_preset: "Windows Desktop"
            artifact_path: build/windows/game.exe
            needs_zip: true
            extra_setup: false
            artifact_name: "game-windows"
            extra_files: "*.dll,*.pck"
            compress_level: 9
          - platform: linux
            export_preset: "Linux/X11"
            artifact_path: build/linux/game.x86_64
            needs_zip: true
            extra_setup: false
            artifact_name: "game-linux"
            extra_files: "*.pck"
            permissions: "755"
            compress_level: 9
    
    name: 🔨 Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.2
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
          
      - name: 🎮 Setup Godot Export Templates
        run: |
          mkdir -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/* ~/.local/share/godot/export_templates/
      
      - name: 🔑 Configure Android Keystore
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android.keystore
          {
            echo "keystore/release=android.keystore"
            echo "keystore/release_user=${{ secrets.ANDROID_KEYSTORE_USER }}"
            echo "keystore/release_password=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
          } >> export_presets.cfg
          
      - name: 📱 Setup Android SDK
        if: matrix.platform == 'android'
        run: |
          # Instalar dependências necessárias
          apt-get update && apt-get install -y --no-install-recommends \
            openjdk-11-jdk-headless \
            wget \
            unzip

          # Configurar variáveis de ambiente
          ANDROID_HOME=/usr/lib/android-sdk
          CMDLINE_TOOLS_ROOT=$ANDROID_HOME/cmdline-tools
          CMDLINE_TOOLS_LATEST=$CMDLINE_TOOLS_ROOT/latest
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

          # Criar diretórios necessários
          mkdir -p $CMDLINE_TOOLS_ROOT
          
          # Download e instalação do SDK
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-*_latest.zip
          mv cmdline-tools $CMDLINE_TOOLS_LATEST
          rm commandlinetools-linux-*_latest.zip
          
          # Configurar PATH
          export PATH=$PATH:$CMDLINE_TOOLS_LATEST/bin:$JAVA_HOME/bin
          
          # Instalar componentes do SDK
          yes | sdkmanager --licenses > /dev/null 2>&1 || true
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" > /dev/null
      
      - name: 🛠️ Build Game
        run: |
          mkdir -p build/${{ matrix.platform }}
          godot --headless --verbose --export-release "${{ matrix.export_preset }}" ${{ matrix.artifact_path }}
          if [ "${{ matrix.platform }}" = "linux" ]; then
            chmod ${{ matrix.permissions }} ${{ matrix.artifact_path }}
          fi
      
      - name: 📦 Package Build
        if: matrix.needs_zip && success()
        run: |
          cd build/${{ matrix.platform }}
          case "${{ matrix.platform }}" in
            "windows")
              find . -type f ! -name "game.exe" ! -name "*.dll" ! -name "*.pck" -delete
              zip -${{ matrix.compress_level }} -r ${{ matrix.artifact_name }}.zip game.exe *.dll *.pck
              ;;
            "linux")
              find . -type f ! -name "game.x86_64" ! -name "*.pck" -delete
              zip -${{ matrix.compress_level }} -r ${{ matrix.artifact_name }}.zip game.x86_64 *.pck
              ;;
          esac
      
      - name: ⬆️ Upload Build Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: ${{ matrix.needs_zip && format('build/{0}/{1}.zip', matrix.platform, matrix.artifact_name) || matrix.artifact_path }}
          retention-days: 7

  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: builds
          
      - name: 📝 Generate Release Notes
        run: |
          cat > CHANGELOG.md << EOL
          ## 📥 Downloads
          * 📱 Android: game.apk
          * 🖥️ Windows: game-windows.zip
          * 🐧 Linux: game-linux.zip

          ## 📝 Notas da Versão
          ### ✨ Novidades
          EOL
          
      - name: 🎉 Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            builds/android-build/game.apk
            builds/windows-build/game-windows.zip
            builds/linux-build/game-linux.zip
          name: "🎮 Game Release ${{ github.ref_name }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -rf \
            android.keystore \
            ~/.local/share/godot \
            ~/.config/godot \
            2>/dev/null || true
